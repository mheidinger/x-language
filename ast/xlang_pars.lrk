SCANNER xlang_scan PARSER xlang_pars
IMPORT {
}

EXPORT {
}

GLOBAL {

#@ line 10 "xlang.pars"

  # include <stdio.h>
  # include <math.h>
  # include "StringM.h"
  # define M_PI acos(-1.0) 


#@ line 19 "xlang_pars.lrk"
# ifdef CommonParsAttrs
typedef struct { CommonParsAttrs } yytCommonParsAttrs;
#  define yyCommon yytCommonParsAttrs Common;
#  define yyCommonParsAttrs CommonParsAttrs
# else
#  define yyCommon
#  define yyCommonParsAttrs
# endif


typedef union {
xlang_scan_tScanAttribute Scan;
yyCommon
} tParsAttribute;
}

LOCAL {
}

BEGIN {
}

CLOSE {
}

TOKEN

int_const = 1
float_const = 2
string_const = 3
prog_name = 4
identifier = 5
separator = 6
'->' = 7
'<-' = 8
'int' = 9
'float' = 10
'string' = 11
';' = 12
'=' = 13
'+' = 14
'-' = 15
'*' = 16
'/' = 17
'%' = 18
'^' = 19
'(' = 20
')' = 21
'if' = 22
'<' = 23
'>' = 24
'<=' = 25
'>=' = 26
'==' = 27
'!=' = 28
'{' = 29
'}' = 30
else = 31
'else if' = 32
'while' = 33
'for' = 34

OPER

NONE  '<' '>' '==' '!='
LEFT  '+' '-'
LEFT  '*' '/' '%'
LEFT  UNARY
RIGHT '^'

RULE

root : Programm .
Programm : NamenTeil separator VariablenTeil separator CodeTeil .
NamenTeil : prog_name .
VariablenTeil : DeclarationList .

#@ line 32 "xlang.pars"
DeclarationList : Variable ';' .
DeclarationList : DeclarationList Variable ';' .

#@ line 37 "xlang.pars"
Variable : IOFlag identifier VariablenTyp .

#@ line 41 "xlang.pars"
IOFlag : '->' .
IOFlag : '<-' .
IOFlag : .

#@ line 47 "xlang.pars"
VariablenTyp : 'int' .
VariablenTyp : 'float' .
VariablenTyp : 'string' .

#@ line 53 "xlang.pars"
CodeTeil : Instruction .
CodeTeil : CodeTeil Instruction .

#@ line 58 "xlang.pars"
Instruction : Assignment ';' .
Instruction : Condition .
Instruction : Loop .
Assignment : identifier '=' Expression .

#@ line 65 "xlang.pars"
Expression : int_const .
Expression : float_const .
Expression : string_const .
Expression : identifier .
Expression : Expression '+' Expression .
Expression : Expression '-' Expression .
Expression : Expression '*' Expression .
Expression : Expression '/' Expression .
Expression : Expression '%' Expression .
Expression : Expression '^' Expression .
Expression : '(' Expression ')' .
Expression : '+' Expression PREC UNARY .
Expression : '-' Expression PREC UNARY .
CodeBlock : '{' CodeTeil '}' .

#@ line 83 "xlang.pars"
Condition : 'if' Comparison CodeBlock .
Condition : 'if' Comparison CodeBlock else CodeBlock .
Condition : 'if' Comparison CodeBlock ElseIfList CodeBlock .
Condition : 'if' Comparison CodeBlock ElseIfList CodeBlock else CodeBlock .

#@ line 90 "xlang.pars"
ElseIfList : 'else if' CodeBlock .
ElseIfList : ElseIfList 'else if' CodeBlock .

#@ line 95 "xlang.pars"
Comparison : Expression '<' Expression .
Comparison : Expression '>' Expression .
Comparison : Expression '<=' Expression .
Comparison : Expression '>=' Expression .
Comparison : Expression '==' Expression .
Comparison : Expression '!=' Expression .

#@ line 104 "xlang.pars"
Loop : WhileLoop .
Loop : ForLoop .
WhileLoop : 'while' Comparison CodeBlock .
ForLoop : 'for' Assignment ';' Comparison ';' Assignment CodeBlock .
